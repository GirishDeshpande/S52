<?xml version="1.0" encoding="utf-8"?>
<!-- BEGIN_INCLUDE(manifest) -->
<manifest xmlns:android       = "http://schemas.android.com/apk/res/android"
          package             = "nav.ecs.s52android"
          android:versionCode = "1"
          android:versionName = "1.0">
          <!--
          android:sharedUserId  ???????
          -->


    <!-- Allows applications to open network sockets to get AIS from radar.imar.ca 8000 -->
    <uses-permission android:name = "android.permission.INTERNET"               />
    <!-- Allows applications to write gpsd.sock, gpsd.pid, sl4agps.pid, s52ais.pid to sdcard -->
    <uses-permission android:name = "android.permission.WRITE_EXTERNAL_STORAGE" />

    <uses-permission android:name = "android.permission.RECEIVE_BOOT_COMPLETED" />

    <uses-permission android:name = "android.permission.KILL_BACKGROUND_PROCESSES" />

    <uses-permission android:name = "android.permission.FORCE_STOP_PACKAGES" />

    <!-- Android 4.2
    <uses-permission android:name = "android.permission.INTERACT_ACROSS_USERS_FULL" />
    -->


    <!-- This is the platform API where NativeActivity was introduced. -->
    <!-- target sdk 11 to get action bar  (and no MENU)                -->
    <!--      android:targetSdkVersion = "16" />                       -->
    <!--
    <uses-sdk android:minSdkVersion    = "10"
              android:targetSdkVersion = "16" />
    -->
    <uses-sdk android:minSdkVersion    = "9"
              android:targetSdkVersion = "10" />


    <!-- This .apk has no Java code itself, so set hasCode to false. -->
    <application android:label               = "@string/app_name"
                 android:hasCode             = "false"
                 android:debuggable          = "true"
                 android:hardwareAccelerated = "true"
                 android:theme               = "@android:style/Theme.Holo">

                 <!--
                 android:hardwareAccelerated = "true"
                 -->


        <!-- Our activity is the built-in NativeActivity framework class.
             This will take care of integrating with our NDK code.

             "reverseLandscape"
        -->
        <activity android:name                  = "android.app.NativeActivity"
                  android:label                 = "@string/app_name"
                  android:screenOrientation     = "sensorLandscape"
                  android:alwaysRetainTaskState = "true"
                  android:configChanges         = "orientation|screenSize"
                  android:launchMode            = "singleInstance"
                  >

                  <!--
                  android:alwaysRetainTaskState = "true"
                  android:clearTaskOnLaunch     = "true"
                  android:screenOrientation     = "nosensor"
                  -->

            <!--  android:configChanges         = "orientation|keyboardHidden" -->
            <!-- "screenLayout", "uiMode",                                     -->
            <!-- "screenSize" in minSdkVersion/targetSdkVersion >= 13          -->
            <!-- android:screenOrientation   = "landscape"                     -->


            <!-- Tell NativeActivity the name of or .so -->
            <meta-data android:name  = "android.app.lib_name"
                       android:value = "s52android"               />

            <!--
            <meta-data android:name  = "android.app.func_name"
                       android:value = "ANativeActivity_onCreate" />
            -->

            <intent-filter>
                <action   android:name = "android.intent.action.MAIN"       />
                <category android:name = "android.intent.category.LAUNCHER" />
            </intent-filter>

        </activity>

        <!--      android:name       = ".BootUpReceiver" -->
        <!--
        <receiver android:enabled    = "true"
                  android:name       = "android.app.NativeActivity"
                  android:permission = "android.permission.RECEIVE_BOOT_COMPLETED">

            <intent-filter>
                <action   android:name = "android.intent.action.BOOT_COMPLETED" />
                <category android:name = "android.intent.category.DEFAULT" />
            </intent-filter>
        </receiver>
        -->

    </application>

</manifest>
<!-- END_INCLUDE(manifest)

    allow script to kill com.googlecode.android_scripting on exit
    But install say:
    Not granting permission android.permission.FORCE_STOP_PACKAGES to package nav.ecs.s52android (protectionLevel=2 flags=0x8be42)
    <uses-permission android:name = "android.permission.FORCE_STOP_PACKAGES" />


    Run as a manufacturer test application, running as the root user.
    Only available when the device is running in manufacturer test mode
    <uses-permission android:name = "android.permission.FACTORY_TEST" />

    <uses-permission android:name = "android.permission.HARDWARE_TEST" />
    <uses-permission android:name = "android.permission.ACCESS_SURFACE_FLINGER" />
    <uses-permission android:name = "android.permission.READ_FRAME_BUFFER" />
    <uses-permission android:name = "android.permission.DUMP" />
    <uses-permission android:name = "android.permission.FORCE_STOP_PACKAGES" />


-->
